AWSTemplateFormatVersion: '2010-09-09'
Description: Serverless app with Lambda, API Gateway, and DynamoDB
 
Resources:
 
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyServerlessTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
 
  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                Resource: "*"
 
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MySimpleLambda
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt MyLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  "statusCode": 200,
                  "body": json.dumps("Hello from Lambda!")
              }
 
  MyApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MySimpleAPI
      ProtocolType: HTTP
      Target: !GetAtt MyLambdaFunction.Arn
 
Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref MyLambdaFunction
 
  APIGatewayID:
    Description: ID of the created API Gateway
    Value: !Ref MyApi
